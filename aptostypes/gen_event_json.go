// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package aptostypes

import (
	"encoding/json"
)

var _ = (*eventMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e Event) MarshalJSON() ([]byte, error) {
	type Event struct {
		Key            string      `json:"key"`
		SequenceNumber jsonUint64  `json:"sequence_number"`
		Type           string      `json:"type"`
		Data           interface{} `json:"data"`
	}
	var enc Event
	enc.Key = e.Key
	enc.SequenceNumber = jsonUint64(e.SequenceNumber)
	enc.Type = e.Type
	enc.Data = e.Data
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *Event) UnmarshalJSON(input []byte) error {
	type Event struct {
		Key            *string     `json:"key"`
		SequenceNumber *jsonUint64 `json:"sequence_number"`
		Type           *string     `json:"type"`
		Data           interface{} `json:"data"`
	}
	var dec Event
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Key != nil {
		e.Key = *dec.Key
	}
	if dec.SequenceNumber != nil {
		e.SequenceNumber = uint64(*dec.SequenceNumber)
	}
	if dec.Type != nil {
		e.Type = *dec.Type
	}
	if dec.Data != nil {
		e.Data = dec.Data
	}
	return nil
}
